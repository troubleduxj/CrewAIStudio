import { apiClient } from '@/lib/api';
import { WorkflowTemplate } from '@/types/workflow';

// 定义创建模板时API期望接收的数据类型
// Omit 'id', 'createdAt', 'updatedAt', 'usageCount' as they are generated by the server
export type CreateWorkflowTemplateRequest = Omit<WorkflowTemplate, 'id' | 'createdAt' | 'updatedAt' | 'usageCount'>;

// 定义更新模板时API期望接收的数据类型
// Partial allows for updating only some fields
export type UpdateWorkflowTemplateRequest = Partial<CreateWorkflowTemplateRequest>;


export class WorkflowTemplateService {
  private readonly basePath = '/workflow-templates';

  /**
   * 创建新的工作流模板
   * @param templateData - The data for the new template.
   * @returns The created workflow template.
   */
  async createTemplate(templateData: CreateWorkflowTemplateRequest): Promise<WorkflowTemplate> {
    try {
      const response = await apiClient.post<WorkflowTemplate>(this.basePath, templateData);
      return response.data;
    } catch (error) {
      console.error('Failed to create workflow template:', error);
      // In a real app, you might want to throw a more specific error
      // or handle it based on the error type (e.g., validation error vs. server error)
      throw new Error('Failed to create workflow template.');
    }
  }

  /**
   * 获取所有工作流模板
   * @returns A list of workflow templates.
   */
  async getTemplates(): Promise<WorkflowTemplate[]> {
    try {
      const response = await apiClient.get<WorkflowTemplate[]>(this.basePath);
      return response.data;
    } catch (error) {
      console.error('Failed to fetch workflow templates:', error);
      throw new Error('Failed to fetch workflow templates.');
    }
  }

  /**
   * 获取单个工作流模板
   * @param id - The ID of the template.
   * @returns The workflow template.
   */
  async getTemplate(id: string): Promise<WorkflowTemplate> {
    try {
      const response = await apiClient.get<WorkflowTemplate>(`${this.basePath}/${id}`);
      return response.data;
    } catch (error: any) {
      console.error(`Failed to fetch workflow template with id ${id}:`, {
        message: error.message,
        stack: error.stack,
        config: error.config,
        request: error.request,
        response: error.response?.data,
      });
      throw new Error(`Failed to fetch workflow template with id ${id}.`);
    }
  }

  /**
   * 删除工作流模板
   * @param id - The ID of the template to delete.
   */
  async deleteTemplate(id: string): Promise<void> {
    try {
      await apiClient.delete(`${this.basePath}/${id}`);
    } catch (error) {
      console.error(`Failed to delete workflow template with id ${id}:`, error);
      throw new Error(`Failed to delete workflow template with id ${id}.`);
    }
  }

  // Future methods for update, delete can be added here.
}

export const workflowTemplateService = new WorkflowTemplateService();
